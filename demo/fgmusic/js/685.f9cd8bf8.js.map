{"version":3,"file":"js/685.f9cd8bf8.js","mappings":"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","sources":["webpack://fgmusic/./src/components/RankingDetailPage.vue","webpack://fgmusic/src/components/RankingDetailPage.vue","webpack://fgmusic/./src/components/RankingDetailPage.vue?771b","webpack://fgmusic/./src/components/RankingDetailPage.vue?a71a","webpack://fgmusic/./src/components/SongsListTable.vue","webpack://fgmusic/src/components/SongsListTable.vue","webpack://fgmusic/./src/components/SongsListTable.vue?fb79","webpack://fgmusic/./src/components/SongsListTable.vue?d25e"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"main_wrap\"},[_c('div',{staticClass:\"header\"},[_c('el-image',{staticClass:\"cover\",attrs:{\"src\":_vm.topListInfo.coverImgUrl,\"fit\":\"cover\",\"title\":_vm.topListInfo.description}},[_c('div',{attrs:{\"slot\":\"placeholder\"},slot:\"placeholder\"},[_c('span',[_c('i',{staticClass:\"el-icon-loading\"})])]),_c('div',{attrs:{\"slot\":\"error\"},slot:\"error\"},[_c('i',{staticClass:\"el-icon-picture-outline\"})])]),_c('div',{staticClass:\"info\"},[_c('div',{staticClass:\"name-update\"},[_c('div',{staticClass:\"name\"},[_vm._v(_vm._s(_vm.topListInfo.name))]),_c('div',{staticClass:\"update\"},[_c('div',{staticClass:\"updateFrequency\"},[_vm._v(_vm._s(_vm.topListInfo.updateFrequency))]),_c('div',{staticClass:\"uptateTime\"},[_vm._v(_vm._s(_vm.formatUpdateTime))])])]),(_vm.topListInfo.description)?_c('div',{staticClass:\"desc\"},[_c('div',{staticClass:\"desc_i\",attrs:{\"title\":_vm.topListInfo.description}},[_vm._v(\" \"+_vm._s(_vm.topListInfo.description)+\" \")])]):_vm._e()])],1),_c('div',{staticClass:\"content\"},[_c('songs-list-table',{attrs:{\"opts\":{\n        type: 'toplist',\n        id: _vm.topListInfo.id,\n      }}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"main_wrap\">\r\n    <div class=\"header\">\r\n      <!-- 图片 -->\r\n      <el-image\r\n        class=\"cover\"\r\n        :src=\"topListInfo.coverImgUrl\"\r\n        fit=\"cover\"\r\n        :title=\"topListInfo.description\"\r\n      >\r\n        <!-- 加载动画 -->\r\n        <div slot=\"placeholder\">\r\n          <span>\r\n            <i class=\"el-icon-loading\"></i>\r\n          </span>\r\n        </div>\r\n        <!-- 错误动画 -->\r\n        <div slot=\"error\">\r\n          <i class=\"el-icon-picture-outline\"></i>\r\n        </div>\r\n      </el-image>\r\n      <!-- 右侧信息 -->\r\n      <div class=\"info\">\r\n        <div class=\"name-update\">\r\n          <div class=\"name\">{{ topListInfo.name }}</div>\r\n          <div class=\"update\">\r\n            <div class=\"updateFrequency\">{{ topListInfo.updateFrequency }}</div>\r\n            <div class=\"uptateTime\">{{ formatUpdateTime }}</div>\r\n          </div>\r\n        </div>\r\n        <!-- 描述 -->\r\n        <div class=\"desc\" v-if=\"topListInfo.description\">\r\n          <div class=\"desc_i\" :title=\"topListInfo.description\">\r\n            {{ topListInfo.description }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 内容渲染 -->\r\n    <div class=\"content\">\r\n      <!-- 内容区域 -->\r\n      <songs-list-table\r\n        :opts=\"{\r\n          type: 'toplist',\r\n          id: topListInfo.id,\r\n        }\"\r\n      ></songs-list-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SongsListTable from \"./SongsListTable.vue\";\r\nexport default {\r\n  name: \"RankingDetailPage\",\r\n  components: {\r\n    SongsListTable,\r\n  },\r\n  data() {\r\n    return {\r\n      topListInfo: {},\r\n    };\r\n  },\r\n  computed: {\r\n    formatUpdateTime() {\r\n      let str = \"\";\r\n      const updateTime = Number(this.topListInfo.updateTime);\r\n      const date = this.formatDate(updateTime, \"MM-DD\");\r\n      const now = Date.now();\r\n      const oneDay = 24 * 60 * 60 * 1000;\r\n      const oneWeek = oneDay * 7;\r\n      const timeDiff = now - updateTime;\r\n      if (timeDiff < oneDay) {\r\n        str = \"刚刚更新\";\r\n      } else if (timeDiff < oneWeek) {\r\n        const dayMap = {\r\n          1: \"一\",\r\n          2: \"二\",\r\n          3: \"三\",\r\n          4: \"四\",\r\n          5: \"五\",\r\n          6: \"六\",\r\n        };\r\n        str = `${dayMap[Math.floor(timeDiff / oneDay)]}天前更新`;\r\n      } else {\r\n        str = date;\r\n      }\r\n      return str;\r\n    },\r\n  },\r\n  created() {\r\n    this.topListInfo = this.$route.query;\r\n  },\r\n  methods: {\r\n    formatDate(timestamp, format = \"YYYY-MM-DD HH:mm:ss\") {\r\n      const date = new Date(timestamp);\r\n\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, \"0\"); // 月份从 0 开始，需要 +1\r\n      const day = String(date.getDate()).padStart(2, \"0\");\r\n      const hours = String(date.getHours()).padStart(2, \"0\");\r\n      const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n      const seconds = String(date.getSeconds()).padStart(2, \"0\");\r\n\r\n      // 替换格式字符串中的占位符\r\n      return format\r\n        .replace(\"YYYY\", year)\r\n        .replace(\"MM\", month)\r\n        .replace(\"DD\", day)\r\n        .replace(\"HH\", hours)\r\n        .replace(\"mm\", minutes)\r\n        .replace(\"ss\", seconds);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.main_wrap {\r\n  height: 100%;\r\n  position: relative;\r\n  .header {\r\n    height: 100px;\r\n    background: var(--primar-color);\r\n    border-radius: 20px;\r\n    padding: 10px;\r\n    display: flex;\r\n    .cover {\r\n      flex: 0 0 100px;\r\n      width: 100px;\r\n      height: 100px;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      font-size: 24px;\r\n      color: var(--primary-text-color);\r\n      background: var(--secondary-bg-color);\r\n      margin-right: 22px;\r\n      border-radius: 16px;\r\n    }\r\n    .info {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .name-update {\r\n        flex: 1;\r\n        margin-bottom: 6px;\r\n        min-height: 34px;\r\n        vertical-align: middle;\r\n        display: flex;\r\n        align-items: center;\r\n        .name {\r\n          font-weight: bold;\r\n          font-size: 26px;\r\n          color: var(--primary-text-color);\r\n          margin-right: 20px;\r\n        }\r\n        .update {\r\n          flex: 1;\r\n          display: flex;\r\n          .updateFrequency {\r\n            margin-bottom: 2px;\r\n            font-size: 12px;\r\n            color: var(--primary-text-color);\r\n            margin-right: 6px;\r\n          }\r\n          .uptateTime {\r\n            font-size: 20px;\r\n            font-size: 12px;\r\n            color: var(--primary-text-color);\r\n          }\r\n        }\r\n      }\r\n      .desc {\r\n        overflow: hidden;\r\n        background: #fff;\r\n        font-size: 14px;\r\n        padding: 6px;\r\n        line-height: 18px;\r\n        border-radius: 8px;\r\n        color: #505050;\r\n        display: flex;\r\n        .desc_i {\r\n          overflow-y: auto;\r\n          scrollbar-width: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .content {\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 130px;\r\n    bottom: 0;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RankingDetailPage.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RankingDetailPage.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./RankingDetailPage.vue?vue&type=template&id=49a91ce7&scoped=true\"\nimport script from \"./RankingDetailPage.vue?vue&type=script&lang=js\"\nexport * from \"./RankingDetailPage.vue?vue&type=script&lang=js\"\nimport style0 from \"./RankingDetailPage.vue?vue&type=style&index=0&id=49a91ce7&prod&lang=less&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"49a91ce7\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"songsListTableMain\",staticClass:\"main_wrap\"},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],ref:\"content\",staticClass:\"content\",attrs:{\"element-loading-background\":\"var(--loading-bg-color)\"}},[(_vm.showRetry)?_c('retry',{on:{\"retry\":_vm.getData}}):_vm._e(),(!_vm.showRetry && !_vm.showEmpty)?_c('el-scrollbar',{staticStyle:{\"height\":\"100%\"},attrs:{\"wrap-style\":\"overflow-x: hidden;\"}},[_c('div',{directives:[{name:\"infinite-scroll\",rawName:\"v-infinite-scroll\",value:(_vm.getData),expression:\"getData\"}],staticClass:\"content_i\",attrs:{\"infinite-scroll-immediate\":\"false\",\"infinite-scroll-disabled\":\"infiniteDisabled\"}},_vm._l((_vm.songsListData),function(item,index){return _c('div',{key:item.id,staticClass:\"table_item\",class:{ act: item.id == _vm.active },on:{\"click\":function($event){_vm.active = item.id},\"dblclick\":function($event){return _vm.playSpecificSong(item)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.point),expression:\"!visAreas.point\"}],staticClass:\"point\"}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.index),expression:\"!visAreas.index\"}],staticClass:\"index\"},[_vm._v(_vm._s(index + 1))]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.song_name),expression:\"!visAreas.song_name\"}],staticClass:\"song_name\",attrs:{\"title\":item.songName}},[_vm._v(\" \"+_vm._s(item.songName)+\" \")]),_c('div',{staticClass:\"version\"},[(item.fee == 1)?_c('span',[_vm._v(\" 试听 \")]):_vm._e()]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.col),expression:\"!visAreas.col\"}],staticClass:\"col\",on:{\"click\":function($event){return _vm.toggleCol(item)}}},[_c('div',{staticClass:\"i_wrapper\"},[_c('i',{staticClass:\"iconfont\",class:{\n                  'icon-xihuan1': !item.isCol,\n                  'icon-xihuan2': item.isCol,\n                }})])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.download),expression:\"!visAreas.download\"}],staticClass:\"download\",on:{\"click\":function($event){return _vm.download(item)}}},[_c('div',{staticClass:\"i_wrapper\"},[_c('i',{staticClass:\"iconfont icon-arrow-down-line\"})])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.artist),expression:\"!visAreas.artist\"}],staticClass:\"artist\",attrs:{\"title\":item.arName}},[_vm._v(\" \"+_vm._s(item.arName)+\" \")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.albumName),expression:\"!visAreas.albumName\"}],staticClass:\"albumName\",attrs:{\"title\":item.albumName}},[_vm._v(\" \"+_vm._s(item.album)+\" \")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.visAreas.duration),expression:\"!visAreas.duration\"}],staticClass:\"duration\"},[_vm._v(\" \"+_vm._s(_vm.formatTime(item.dt))+\" \")])])}),0)]):_vm._e(),(_vm.showEmpty && !_vm.showRetry && !_vm.loading)?_c('div',{staticClass:\"empty\"},[_c('div',{staticClass:\"empty_i\"},[_vm._v(\"没有数据\")])]):_vm._e()],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"main_wrap\" ref=\"songsListTableMain\">\r\n    <div\r\n      class=\"content\"\r\n      ref=\"content\"\r\n      v-loading=\"loading\"\r\n      element-loading-background=\"var(--loading-bg-color)\"\r\n    >\r\n      <!-- 重试 -->\r\n      <retry @retry=\"getData\" v-if=\"showRetry\"></retry>\r\n      <!-- 内容 -->\r\n      <el-scrollbar\r\n        v-if=\"!showRetry && !showEmpty\"\r\n        style=\"height: 100%\"\r\n        wrap-style=\"overflow-x: hidden;\"\r\n      >\r\n        <div\r\n          class=\"content_i\"\r\n          infinite-scroll-immediate=\"false\"\r\n          v-infinite-scroll=\"getData\"\r\n          infinite-scroll-disabled=\"infiniteDisabled\"\r\n        >\r\n          <div\r\n            class=\"table_item\"\r\n            @click=\"active = item.id\"\r\n            v-for=\"(item, index) in songsListData\"\r\n            @dblclick=\"playSpecificSong(item)\"\r\n            :key=\"item.id\"\r\n            :class=\"{ act: item.id == active }\"\r\n          >\r\n            <div class=\"point\" v-show=\"!visAreas.point\"></div>\r\n            <div class=\"index\" v-show=\"!visAreas.index\">{{ index + 1 }}</div>\r\n            <div\r\n              class=\"song_name\"\r\n              :title=\"item.songName\"\r\n              v-show=\"!visAreas.song_name\"\r\n            >\r\n              {{ item.songName }}\r\n            </div>\r\n            <div class=\"version\">\r\n              <span v-if=\"item.fee == 1\"> 试听 </span>\r\n            </div>\r\n            <div class=\"col\" v-show=\"!visAreas.col\" @click=\"toggleCol(item)\">\r\n              <div class=\"i_wrapper\">\r\n                <i\r\n                  class=\"iconfont\"\r\n                  :class=\"{\r\n                    'icon-xihuan1': !item.isCol,\r\n                    'icon-xihuan2': item.isCol,\r\n                  }\"\r\n                ></i>\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"download\"\r\n              v-show=\"!visAreas.download\"\r\n              @click=\"download(item)\"\r\n            >\r\n              <div class=\"i_wrapper\">\r\n                <i class=\"iconfont icon-arrow-down-line\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"artist\" v-show=\"!visAreas.artist\" :title=\"item.arName\">\r\n              {{ item.arName }}\r\n            </div>\r\n            <div\r\n              class=\"albumName\"\r\n              v-show=\"!visAreas.albumName\"\r\n              :title=\"item.albumName\"\r\n            >\r\n              {{ item.album }}\r\n            </div>\r\n            <div class=\"duration\" v-show=\"!visAreas.duration\">\r\n              {{ formatTime(item.dt) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </el-scrollbar>\r\n      <!-- 无数据 -->\r\n      <div class=\"empty\" v-if=\"showEmpty && !showRetry && !loading\">\r\n        <div class=\"empty_i\">没有数据</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from \"vuex\";\r\nexport default {\r\n  name: \"SongsListTable\",\r\n  props: {\r\n    // 接受隐藏项\r\n    visAreas: {\r\n      type: Object,\r\n      default: () => ({\r\n        // point: false,\r\n        // index: false,\r\n        // song_name: false,\r\n        // col: false,\r\n        // download: false,\r\n        // artist: false,\r\n        // albumName: false,\r\n        // duration: false,\r\n      }),\r\n    },\r\n    // 接受参数项\r\n    opts: {\r\n      type: Object,\r\n      default: () => ({\r\n        id: 0,\r\n        type: \"\",\r\n        keywords: \"\",\r\n        // type:toplist || col || search\r\n      }),\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      songsListData: [], // 歌曲内容\r\n      active: 0, //选中高亮\r\n      loading: false,\r\n      showRetry: false,\r\n      showEmpty: false,\r\n      infiniteDisabled: false, //无限滚动\r\n      limit: 30,\r\n      offset: 0,\r\n      keywords: \"\",\r\n      lastLoadCount: 0, // 用于跳过已经请求过的资源\r\n    };\r\n  },\r\n  watch: {\r\n    opts: {\r\n      handler(value) {\r\n        this.songsListData = [];\r\n        this.getData();\r\n        this.keywords = value.keywords;\r\n        this.lastLoadCount = 0;\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"playQueue\", \"downloadList\", \"settings\", \"selectedTrackId\"]),\r\n  },\r\n  methods: {\r\n    ...mapActions([\r\n      \"pushToPlaylist\",\r\n      \"updateCurrentTrack\",\r\n      \"addToDownloadList\",\r\n    ]),\r\n    // 格式化时长 HH:mm:ss\r\n    formatTime(duration) {\r\n      const hours = Math.floor(duration / 3600000);\r\n      const minutes = Math.floor((duration % 3600000) / 60000);\r\n      const seconds = Math.floor((duration % 60000) / 1000);\r\n      return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(\r\n        2,\r\n        \"0\"\r\n      )}:${String(seconds).padStart(2, \"0\")}`;\r\n    },\r\n    // 拼接歌手名称\r\n    arNameFormatted(nameList) {\r\n      let str = \"\";\r\n      const nameArr = nameList.map((item) => {\r\n        return item.name;\r\n      });\r\n      if (nameArr.length > 3) {\r\n        str = \"群星\";\r\n      } else {\r\n        str = nameArr.join(\" & \");\r\n      }\r\n      return str;\r\n    },\r\n    // 获取数据\r\n    async getData() {\r\n      this.loading = true;\r\n      this.showEmpty = false;\r\n      this.showRetry = false;\r\n\r\n      const opts = this.opts;\r\n      try {\r\n        switch (opts.type) {\r\n          case \"col\":\r\n            this.infiniteDisabled = true;\r\n            this.getShowColData();\r\n            break;\r\n          case \"toplist\":\r\n            this.infiniteDisabled = true;\r\n            await this.getToplistData(opts.id);\r\n            break;\r\n          case \"search\":\r\n            if (opts.keywords) {\r\n              await this.getSearchData(opts.keywords);\r\n            }\r\n            break;\r\n          default: {\r\n            this.$message.error(\"传入参数错误！\");\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.showRetry = true;\r\n        this.$message.error(\"获取榜单数据失败！\");\r\n      }\r\n      this.loading = false;\r\n      if (!this.songsListData.length) this.showEmpty = true;\r\n    },\r\n    // 发起请求\r\n    async getToplistData(toplistId) {\r\n      if (toplistId == 0) return;\r\n      console.log(\"获取排行榜数据\");\r\n      // 19723756\r\n      // 此处获取歌单详情\r\n      const { data: playlistData } = await this.$http.get(\"/playlist/detail\", {\r\n        params: {\r\n          id: toplistId,\r\n        },\r\n      });\r\n      // 拼接 id\r\n      const trackIds = playlistData.playlist.trackIds.map((item) => item.id);\r\n      // 获取音乐详情\r\n      const { data: songsList } = await this.$http.get(\"song/detail\", {\r\n        params: {\r\n          ids: trackIds.join(\",\"),\r\n        },\r\n      });\r\n      // 格式化数据并添加至songsListData\r\n      let songsListData_temp = songsList.songs.map((item) => {\r\n        return {\r\n          id: item.id,\r\n          picUrl: item.al.picUrl,\r\n          songName: item.name,\r\n          arName: this.arNameFormatted(item.ar),\r\n          album: item.al.name,\r\n          dt: item.dt,\r\n          isPlayable: true,\r\n          isCol: this.checkIsCol(item), // 判断本地存储是否存在\r\n          fee: item.fee,\r\n        };\r\n      });\r\n      // 忽略试听歌曲\r\n      if (this.settings?.playSettings?.ignorePreviewTracks) {\r\n        songsListData_temp = songsListData_temp.filter(\r\n          (item) => item.fee !== 1\r\n        );\r\n      }\r\n      this.songsListData = songsListData_temp;\r\n    },\r\n    // 获取搜索数据\r\n    async getSearchData(keywords) {\r\n      if (keywords.trim() == \"\") return;\r\n      console.log(\"搜索歌曲\");\r\n      if (this.keywords !== keywords) {\r\n        this.songsListData = [];\r\n        this.offset = 0;\r\n      }\r\n      const url = \"/cloudsearch\";\r\n      const params = {\r\n        limit: this.limit,\r\n        offset: this.offset,\r\n        type: 1, // 1 单曲 10 专辑 100 歌手 1000 歌单 1002用户 1004 mv 1006 歌词 1014视频 1018综合 2000 声音\r\n        keywords: keywords,\r\n      };\r\n      let { data } = await this.$http.get(url, { params });\r\n      data = data.result.songs || [];\r\n      // 格式化数据\r\n      let songsListData_temp = data.map((item) => {\r\n        return {\r\n          id: item.id,\r\n          picUrl: item.al.picUrl,\r\n          songName: item.name,\r\n          arName: this.arNameFormatted(item.ar),\r\n          album: item.al.name,\r\n          dt: item.dt,\r\n          isPlayable: true, // 默认播放源正常\r\n          isCol: this.checkIsCol(item), // 判断是否为喜欢\r\n          fee: item.fee,\r\n        };\r\n      });\r\n      // 排除重复值\r\n      let uniqueItems = this.filterUniqueItems(\r\n        this.songsListData,\r\n        songsListData_temp\r\n      );\r\n      // 关闭无限滚动\r\n      if (!uniqueItems.length) {\r\n        this.infiniteDisabled = true;\r\n      }\r\n      this.offset += this.limit;\r\n      // 忽略试听歌曲\r\n      if (this.settings?.playSettings?.ignorePreviewTracks) {\r\n        // 去除试听歌曲\r\n        uniqueItems = uniqueItems.filter((item) => item.fee !== 1);\r\n        this.songsListData.push(...uniqueItems);\r\n        // 去除试听歌曲后 uniqueItems 数组为空且 infiniteDisabled 为 false\r\n        if (!uniqueItems.length && !this.infiniteDisabled) {\r\n          this.getData();\r\n        }\r\n      } else {\r\n        this.songsListData.push(...uniqueItems);\r\n      }\r\n    },\r\n    // 展示收藏数据\r\n    getShowColData() {\r\n      console.log(\"展示收藏数据\");\r\n      const myCol = JSON.parse(localStorage.getItem(\"myCol\") || \"{}\");\r\n      const songs = myCol.songs || [];\r\n      this.songsListData = songs;\r\n    },\r\n    // 下载\r\n    async download(item) {\r\n      console.log(\"尝试下载\");\r\n      // 获取 url\r\n      await this.checkPlayable([item]);\r\n      if (!item.url) return this.$message.error(\"URL为空\");\r\n      // 传入参数 用于添加下载列表\r\n      const obj = {\r\n        name: item.songName,\r\n        id: item.id,\r\n        url: item.url,\r\n      };\r\n      // confirm 信息\r\n      let msg = \"是否下载？\"; // 提示信息\r\n      // 执行方法\r\n      let handleConfirm = () => {\r\n        this.addToDownloadList(obj);\r\n        this.$message.success(\"添加至下载列表！\");\r\n      };\r\n      // 是否为试听版\r\n      if (item.freeTrialInfo.end) {\r\n        const time = item.freeTrialInfo.end - item.freeTrialInfo.start;\r\n        msg = \"该歌曲为试听版，是否继续下载？时长\" + time + \"秒\";\r\n      }\r\n      // 判断是否存在下载列表\r\n      const isUnique = this.downloadList.findIndex((i) => i.id == item.id);\r\n      if (isUnique !== -1) {\r\n        msg = \"下载列表已经存在，是否重复下载\";\r\n      }\r\n      // 弹出提示框\r\n      this.$confirm(msg, \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n        customClass: \"messageBox\",\r\n      })\r\n        .then(handleConfirm)\r\n        .catch(() => {});\r\n    },\r\n    // 播放指定歌曲\r\n    async playSpecificSong(item) {\r\n      try {\r\n        await this.checkPlayable(this.songsListData);\r\n      } catch (err) {\r\n        return this.$message.error(\"获取歌曲详情失败！\");\r\n      }\r\n      if (!item.isPlayable) return this.$message.error(\"无法播放！\");\r\n      // 判断是否需要更新播放列表\r\n      const isChangePlayQueue = this.eqArr(this.songsListData, this.playQueue);\r\n      if (!isChangePlayQueue) {\r\n        this.pushToPlaylist([...this.songsListData]);\r\n      }\r\n      // console.log(` 当前播放${item.id},正在播放${this.selectedTrackId}`);\r\n      // 是否重新播放当前这首\r\n      if (item.id == this.selectedTrackId) {\r\n        this.updateCurrentTrack(-2); // 传入-2\r\n      } else {\r\n        // 写入播放索引\r\n        this.updateCurrentTrack(item.id);\r\n      }\r\n    },\r\n    // 查询播放源 会对原数组修改\r\n    async checkPlayable(arr) {\r\n      console.log(\"查询播放源\");\r\n      // 跳过之前\r\n      let arrTemp = [];\r\n      // 无需通过网络请求片段不会设置 lastLoadCount\r\n      if (this.lastLoadCount) {\r\n        // 只需要最后添加的片段\r\n        arrTemp = arr.slice(this.lastLoadCount);\r\n        arr = arrTemp;\r\n      }\r\n      const ids = arr.map((i) => i.id).join(\",\");\r\n      const url = \"/song/url\";\r\n      let { data } = await this.$http.get(url, {\r\n        params: {\r\n          id: ids,\r\n        },\r\n      });\r\n      data = data.data;\r\n      arr.forEach((itemA) => {\r\n        const itemB = data.find((itemB) => itemA.id == itemB.id);\r\n        // 对原数组进行修改\r\n        itemA.url = itemB.url;\r\n        itemA.freeTrialInfo = itemB.freeTrialInfo || {}; //试听信息\r\n        if (!itemA.url) itemA.isPlayable = false;\r\n      });\r\n      // 保存当前已加载的下标\r\n      this.lastLoadCount += arr.length;\r\n    },\r\n    // 判断是否为本地收藏\r\n    checkIsCol(item) {\r\n      let myCol = localStorage.getItem(\"myCol\");\r\n      if (!myCol) return false;\r\n\r\n      myCol = JSON.parse(myCol);\r\n      return myCol.songs ? myCol.songs.some((i) => i.id === item.id) : false;\r\n    },\r\n    // 收藏歌曲\r\n    toggleCol(item) {\r\n      // songs\r\n      console.log(\"切换喜欢\");\r\n      let localMyCol = JSON.parse(localStorage.getItem(\"myCol\") || \"{}\");\r\n      if (!localMyCol.songs) {\r\n        localMyCol.songs = [];\r\n      }\r\n      const index = localMyCol.songs.findIndex((i) => i.id == item.id);\r\n      if (item.isCol) {\r\n        localMyCol.songs.splice(index, 1);\r\n        item.isCol = false;\r\n        this.$message.success(\"取消收藏成功！\");\r\n      } else {\r\n        localMyCol.songs.push(item);\r\n        item.isCol = true;\r\n        this.$message.success(\"添加收藏成功！\");\r\n      }\r\n      localStorage.setItem(\"myCol\", JSON.stringify(localMyCol));\r\n    },\r\n    // 判断数组是否相同 浅层\r\n    eqArr(a, b) {\r\n      return a.length === b.length && a.every((item, i) => item.id === b[i].id);\r\n    },\r\n    // 过滤重复项\r\n    filterUniqueItems(existingItems, allItems) {\r\n      // 从 allItems 中筛选出那些在 existingItems 中不存在的项\r\n      const uniqueItems = allItems.filter((item) => {\r\n        return !existingItems.some(\r\n          (existingItem) => existingItem.id === item.id\r\n        );\r\n      });\r\n      return uniqueItems;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.main_wrap {\r\n  height: 100%;\r\n  position: relative;\r\n  .content {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    .table_item {\r\n      height: 44px;\r\n      margin-bottom: 7px;\r\n      display: flex;\r\n      font-size: 14px;\r\n      align-items: center;\r\n      padding-left: 16px;\r\n      font-weight: bold;\r\n      color: var(--secondary-text-color);\r\n      border-radius: 12px;\r\n      & > div {\r\n        flex: 1;\r\n        margin-right: 5px;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n      }\r\n      &:hover {\r\n        background: var(--secondary-bg-color);\r\n        color: var(--text-hover-color);\r\n      }\r\n      &.act {\r\n        background: var(--secondary-bg-color);\r\n        color: var(--primary-text-color);\r\n      }\r\n      .point {\r\n        flex: 0 0 10px;\r\n        margin-right: 16px;\r\n        width: 10px;\r\n        height: 10px;\r\n        border-radius: 50%;\r\n        background-color: var(--primar-color);\r\n      }\r\n      .index {\r\n        width: 46px;\r\n        flex: 0 0 46px;\r\n      }\r\n      // 歌曲名称\r\n      .song_name {\r\n        flex: 1;\r\n      }\r\n      .version {\r\n        flex: 0 0 50px;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        & > span {\r\n          color: #fe7360;\r\n          border: 1px solid #fe7360;\r\n          box-sizing: border-box;\r\n          font-size: 10px;\r\n          padding: 2px;\r\n        }\r\n      }\r\n      // 下载和喜欢\r\n      .col,\r\n      .download {\r\n        cursor: pointer;\r\n        width: 34px;\r\n        flex: 0 0 34px;\r\n        font-weight: normal;\r\n        margin-right: 0;\r\n        .iconfont {\r\n          font-size: 12px;\r\n        }\r\n        .icon-xihuan2 {\r\n          color: #e01e1e;\r\n        }\r\n        .i_wrapper {\r\n          width: 25px;\r\n          height: 25px;\r\n          text-align: center;\r\n          line-height: 25px;\r\n          border-radius: 8px;\r\n          transition: background var(--transition-duration);\r\n          &:hover {\r\n            background: var(--primary-button-hover-color);\r\n          }\r\n        }\r\n      }\r\n      // 作者\r\n      .artist {\r\n        width: 220px;\r\n      }\r\n      // 专辑\r\n      .albumName {\r\n        width: 340px;\r\n      }\r\n      // 时长\r\n      .duration {\r\n        width: 110px;\r\n      }\r\n    }\r\n    // 无数据\r\n    .empty {\r\n      width: 100%;\r\n      height: 100%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n\r\n      & > .empty_i {\r\n        width: 134px;\r\n        height: 42px;\r\n        background-color: var(--nav-bg-color);\r\n        color: var(--secondary-text-color);\r\n        border-radius: 12px;\r\n        line-height: 42px;\r\n        text-align: center;\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SongsListTable.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SongsListTable.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./SongsListTable.vue?vue&type=template&id=4a2fc9ff&scoped=true\"\nimport script from \"./SongsListTable.vue?vue&type=script&lang=js\"\nexport * from \"./SongsListTable.vue?vue&type=script&lang=js\"\nimport style0 from \"./SongsListTable.vue?vue&type=style&index=0&id=4a2fc9ff&prod&lang=less&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4a2fc9ff\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","topListInfo","coverImgUrl","description","slot","_v","_s","name","updateFrequency","formatUpdateTime","_e","type","id","staticRenderFns","components","SongsListTable","data","computed","str","updateTime","Number","date","formatDate","now","Date","oneDay","oneWeek","timeDiff","dayMap","Math","floor","created","$route","query","methods","timestamp","format","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","component","ref","directives","rawName","value","loading","expression","showRetry","on","getData","showEmpty","staticStyle","_l","songsListData","item","index","key","class","act","active","$event","playSpecificSong","visAreas","point","song_name","songName","fee","col","toggleCol","isCol","download","artist","arName","albumName","album","duration","formatTime","dt","props","Object","default","opts","keywords","infiniteDisabled","limit","offset","lastLoadCount","watch","handler","immediate","mapGetters","mapActions","arNameFormatted","nameList","nameArr","map","length","join","getShowColData","getToplistData","getSearchData","$message","error","err","console","toplistId","playlistData","$http","get","params","trackIds","playlist","songsList","ids","songsListData_temp","songs","picUrl","al","ar","isPlayable","checkIsCol","settings","playSettings","ignorePreviewTracks","filter","trim","url","result","uniqueItems","filterUniqueItems","push","myCol","JSON","parse","localStorage","getItem","checkPlayable","obj","msg","handleConfirm","addToDownloadList","success","freeTrialInfo","end","time","start","isUnique","downloadList","findIndex","i","$confirm","confirmButtonText","cancelButtonText","customClass","then","catch","isChangePlayQueue","eqArr","playQueue","pushToPlaylist","selectedTrackId","updateCurrentTrack","arr","arrTemp","slice","forEach","itemA","itemB","find","some","localMyCol","splice","setItem","stringify","a","b","every","existingItems","allItems","existingItem"],"sourceRoot":""}